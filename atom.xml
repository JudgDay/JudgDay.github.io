<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GaoJian&#39;blog</title>
  
  <subtitle>勤奋努力的鉴酱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zmjwdzjl.com/"/>
  <updated>2023-07-30T15:56:17.235Z</updated>
  <id>http://zmjwdzjl.com/</id>
  
  <author>
    <name>Gao Jian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot汉字转拼音</title>
    <link href="http://zmjwdzjl.com/2023/07/30/SpringBoot%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3/"/>
    <id>http://zmjwdzjl.com/2023/07/30/SpringBoot汉字转拼音/</id>
    <published>2023-07-30T15:53:59.000Z</published>
    <updated>2023-07-30T15:56:17.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot汉字转拼音"><a href="#SpringBoot汉字转拼音" class="headerlink" title="SpringBoot汉字转拼音"></a>SpringBoot汉字转拼音</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hankcs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hanlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>portable-1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="汉字转拼音"><a href="#汉字转拼音" class="headerlink" title="汉字转拼音"></a>汉字转拼音</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Pinyin&gt; pinyins = PinyinDictionary.convertToPinyin(<span class="string">"重庆"</span>);</span><br><span class="line">    ListUtils.emptyIfNull(pinyins).forEach(v-&gt; System.out.print(v.getPinyinWithoutTone()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汉字首字母"><a href="#汉字首字母" class="headerlink" title="汉字首字母"></a>汉字首字母</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Pinyin&gt; pinyins = PinyinDictionary.convertToPinyin(<span class="string">"重庆"</span>);</span><br><span class="line">    ListUtils.emptyIfNull(pinyins).forEach(v-&gt; System.out.print(v.getFirstChar()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汉字符号音调"><a href="#汉字符号音调" class="headerlink" title="汉字符号音调"></a>汉字符号音调</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Pinyin&gt; pinyins = PinyinDictionary.convertToPinyin(<span class="string">"重庆"</span>);</span><br><span class="line">    ListUtils.emptyIfNull(pinyins).forEach(v-&gt; System.out.print(v.getPinyinWithToneMark()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汉字数字音调"><a href="#汉字数字音调" class="headerlink" title="汉字数字音调"></a>汉字数字音调</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Pinyin&gt; pinyins = PinyinDictionary.convertToPinyin(<span class="string">"重庆"</span>);</span><br><span class="line">    ListUtils.emptyIfNull(pinyins).forEach(v-&gt; System.out.print(v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汉字声母"><a href="#汉字声母" class="headerlink" title="汉字声母"></a>汉字声母</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Pinyin&gt; pinyins = PinyinDictionary.convertToPinyin(<span class="string">"重庆"</span>);</span><br><span class="line">    ListUtils.emptyIfNull(pinyins).forEach(v-&gt; System.out.print(v.getShengmu()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="汉字音调"><a href="#汉字音调" class="headerlink" title="汉字音调"></a>汉字音调</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.ListUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Pinyin&gt; pinyins = PinyinDictionary.convertToPinyin(<span class="string">"重庆"</span>);</span><br><span class="line">    ListUtils.emptyIfNull(pinyins).forEach(v-&gt; System.out.print(v.getTone()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot汉字转拼音&quot;&gt;&lt;a href=&quot;#SpringBoot汉字转拼音&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot汉字转拼音&quot;&gt;&lt;/a&gt;SpringBoot汉字转拼音&lt;/h1&gt;&lt;h2 id=&quot;引入依赖&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="SpringBoot" scheme="http://zmjwdzjl.com/tagss/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 413错误解决方法</title>
    <link href="http://zmjwdzjl.com/2023/07/30/HTTP-413%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://zmjwdzjl.com/2023/07/30/HTTP-413错误解决方法/</id>
    <published>2023-07-30T15:48:54.000Z</published>
    <updated>2023-07-30T15:51:37.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-413错误解决方法"><a href="#HTTP-413错误解决方法" class="headerlink" title="HTTP 413错误解决方法"></a>HTTP 413错误解决方法</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于上传文件过大引起的，排查服务器是否有使用nginx做反向代理</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>修改nginx配置文件，调整客户端请求大小和缓存大小</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">10M</span>;</span><br><span class="line">    <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client_max_body_size: 客户端请求服务器最大允许大小，默认1M。如果请求的正文数据大于client_max_body_size，HTTP协议会报413 Request Entity Too Large。</p><p>client_body_buffer_size: nginx分配给请求数据的Buffer大小，如果请求的数据小于client_body_buffer_size则将数据先在内存中存储。如果请求的值大于client_body_buffer_size小于client_max_body_size，就会将数据先存储到临时文件中。</p><p>client_body_temp: 临时文件存储位置，默认/tmp/。配置的client_body_temp地址，一定让执行的Nginx的用户组有读写权限。否则，当传输的数据大于client_body_buffer_size，写进临时文件失败会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20648 open() "/usr/local/openresty-1.9.7.5/nginx/client_body_temp/0000000019" failed (13: Permission denied)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-413错误解决方法&quot;&gt;&lt;a href=&quot;#HTTP-413错误解决方法&quot; class=&quot;headerlink&quot; title=&quot;HTTP 413错误解决方法&quot;&gt;&lt;/a&gt;HTTP 413错误解决方法&lt;/h1&gt;&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot;
      
    
    </summary>
    
      <category term="开发问题" scheme="http://zmjwdzjl.com/categories/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="HTTP Status Code" scheme="http://zmjwdzjl.com/tagss/HTTP-Status-Code/"/>
    
  </entry>
  
  <entry>
    <title>Linux之find命令</title>
    <link href="http://zmjwdzjl.com/2023/07/30/Linux%E4%B9%8Bfind%E5%91%BD%E4%BB%A4/"/>
    <id>http://zmjwdzjl.com/2023/07/30/Linux之find命令/</id>
    <published>2023-07-30T15:45:39.000Z</published>
    <updated>2023-07-30T15:47:35.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux之find命令"><a href="#Linux之find命令" class="headerlink" title="Linux之find命令"></a>Linux之find命令</h1><p><code>find</code> 命令用于在指定的目录下搜索文件和目录。可支持根据文件名、文件类型、文件大小、修改时间等条件进行筛选。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 目录路径 [选项参数] [搜索条件]</span><br></pre></td></tr></table></figure><ul><li>目录路径：指定要查找的目录路径。</li><li>选项参数：用于指定匹配条件，例如文件名、类型。</li><li>搜索条件：用于指定要搜索的文件和目录，满足这个条件的就会被搜索出来。</li></ul><h2 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h2><h3 id="name"><a href="#name" class="headerlink" title="-name"></a>-name</h3><p>按文件名进行匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索后缀为txt的文件</span></span><br><span class="line">find / -name "*.txt"</span><br></pre></td></tr></table></figure><h3 id="type"><a href="#type" class="headerlink" title="-type"></a>-type</h3><p>按文件类型进行匹配</p><p><code>d</code>: 目录、<code>f</code>: 文件、<code>l</code>: 符号链接（软链接）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索文件类型为目录的文件</span></span><br><span class="line">find / -type d</span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="-size"></a>-size</h3><p>按文件大小进行匹配</p><p><code>+</code> : 大于、<code>-</code> ：小于</p><p>单位: <code>c</code>（字节）、<code>w</code>（字数）、<code>b</code>（块数）、<code>k</code>（KB）、<code>M</code>（MB）、 <code>G</code>（GB）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索大于100KB的文件</span></span><br><span class="line">find / -size +100c</span><br></pre></td></tr></table></figure><h3 id="user"><a href="#user" class="headerlink" title="-user"></a>-user</h3><p>按文件所属用户进行匹配。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索属于root用户的文件</span></span><br><span class="line">find / -user root</span><br></pre></td></tr></table></figure><h3 id="mtime"><a href="#mtime" class="headerlink" title="-mtime"></a>-mtime</h3><p>按文件最后内容的修改时间进行匹配</p><p><code>+</code> : 几天之内、<code>-</code> : 几天之前</p><p>单位: 天</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索修改日期为7天前的文件</span></span><br><span class="line">find / -mtime -7</span><br></pre></td></tr></table></figure><h3 id="perm"><a href="#perm" class="headerlink" title="-perm"></a>-perm</h3><p>按文件权限进行匹配</p><p><code>/u</code>: 当前用户、<code>/g</code>: 组权限、<code>/o</code>: 其他用户权限、<code>/a</code>: 所有用户权限</p><p><code>+</code> : 具有、<code>-</code> : 不具有</p><p><code>r</code>: 读权限、<code>w</code>: 写权限、<code>x</code>: 执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找具有读写权限的文件</span></span><br><span class="line">find / -perm /u+rw</span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="-exec"></a>-exec</h3><p>对搜索的结果执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将后缀为txt的文件删除</span></span><br><span class="line">find / -name "*.txt" -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p><code>{}</code>为占位符，将搜索的结果放到这里</p><p><code>-exec</code> 参数需要使用 <code>\;</code> 作为命令的结尾</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux之find命令&quot;&gt;&lt;a href=&quot;#Linux之find命令&quot; class=&quot;headerlink&quot; title=&quot;Linux之find命令&quot;&gt;&lt;/a&gt;Linux之find命令&lt;/h1&gt;&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 命令用于在指定的目录下搜
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Linux" scheme="http://zmjwdzjl.com/tagss/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot事务回滚</title>
    <link href="http://zmjwdzjl.com/2023/07/30/SpringBoot%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A/"/>
    <id>http://zmjwdzjl.com/2023/07/30/SpringBoot事务回滚/</id>
    <published>2023-07-30T15:38:56.000Z</published>
    <updated>2023-07-30T15:44:43.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot事务回滚"><a href="#SpringBoot事务回滚" class="headerlink" title="SpringBoot事务回滚"></a>SpringBoot事务回滚</h1><p>在开发过程中有时会遇到，多次操作数据时，某次操作出现问题导致程序终止，但是之前的数据已经操作，需要回滚使数据复原。基于这种情况，SpringBoot提供了一个注解@Transactional，帮助回滚事务。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在应用系统调用声明了@Transactional的目标方法时，Spring Framework 默认使用AOP代理，在代码运行时生成一个代理对象，根据@Transactional的属性配置信息，这个代理对象决定该声明 @Transactional 的目标方法是否由拦截器TransactionInterceptor来使用拦截，在TransactionInterceptor拦截时，会在目标方法开始执行之前创建并加入事务，并执行目标方法的逻辑，最后根据执行情况是否出现异常，利用抽象事务管理器AbstractPlatformTransactionManager操作数据源DataSource提交或回滚事务。</p><h2 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h2><p>启动类加上@EnableTransactionManagement注解，开启事务支持。</p><p>SpringBoot默认开启事务，直接在接口、类、方法上使用@Transactional注解即可。</p><h3 id="自动回滚"><a href="#自动回滚" class="headerlink" title="自动回滚"></a>自动回滚</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    success();</span><br><span class="line">    <span class="comment">//假如error()会抛出异常，则success()对数据库的操作会回滚。</span></span><br><span class="line">    error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动回滚"><a href="#手动回滚" class="headerlink" title="手动回滚"></a>手动回滚</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    success();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        exception();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// 手动回滚事务</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部分回滚"><a href="#部分回滚" class="headerlink" title="部分回滚"></a>部分回滚</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    success();</span><br><span class="line">    <span class="comment">//只回滚以下异常</span></span><br><span class="line">    Object savePoint = TransactionAspectSupport.currentTransactionStatus().createSavepoint();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        exception();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// 手动回滚事务</span></span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br><span class="line">        <span class="keyword">return</span> ApiReturnUtil.error();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ApiReturnUtil.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Transactional参数"><a href="#Transactional参数" class="headerlink" title="@Transactional参数"></a>@Transactional参数</h1><table><thead><tr><th>参数名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>readOnly</strong></td><td>用于设置当前事务是否为只读事务。true表示只读，false则表示可读写，默认为false。例如：@Transactional(readOnly=true)</td></tr><tr><td><strong>rollbackFor</strong></td><td>用于设置需要进行回滚的<strong>异常类</strong>数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。默认为非检测性异常unchecked exceptions(RuntimeException和Error)。<br>例如：<br>指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)<br>指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})</td></tr><tr><td>transactionManager / value</td><td>多个事务管理器托管在Spring容器中时，指定事务管理器的bean名称</td></tr><tr><td>rollbackForClassName</td><td>用于设置需要进行回滚的<strong>异常类名称</strong>数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。<br>例如：<br>指定单一异常类名称：@Transactional(rollbackForClassName=”RuntimeException”)<br>指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”, “Exception”})</td></tr><tr><td>noRollbackFor</td><td>用于设置不需要进行回滚的<strong>异常类</strong>数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。<br>例如：<br>指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)<br>指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</td></tr><tr><td>noRollbackForClassName</td><td>用于设置不需要进行回滚的<strong>异常类名称</strong>数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。<br>例如：<br>指定单一异常类名称：@Transactional(noRollbackForClassName=”RuntimeException”)<br>指定多个异常类名称：@Transactional(noRollbackForClassName={“RuntimeException”, “Exception”})</td></tr><tr><td>propagation</td><td>用于设置事务的传播行为。默认为REQUIRED。例如：@Transactional(propagation=Propagation.NOT_SUPPORTED, readOnly=true)</td></tr><tr><td>isolation</td><td>用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置。</td></tr><tr><td>timeout</td><td>用于设置事务的超时秒数。单位为秒，-1表示永不超时，默认为-1。例如：@Transactional(timeout=30)</td></tr></tbody></table><h3 id="Propagation参数（事务的传播行为）"><a href="#Propagation参数（事务的传播行为）" class="headerlink" title="@Propagation参数（事务的传播行为）"></a>@Propagation参数（事务的传播行为）</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>REQUIRED</td><td>默认的传播行为。如果有事务，则加入事务。没有事务，则新建事务</td></tr><tr><td>SUPPORTS</td><td>如果有事务，则加入事务。没有事务，则不用事务</td></tr><tr><td>MANDATORY</td><td>必须在一个已有的事务中执行。如果当前存在事务，则加入该事务，如果当前不存在事务，则抛出异常</td></tr><tr><td>REQUIRES_NEW</td><td>不管是否存在事务，都新建事务执行。如果已有事务，则挂起当前事务，再新建事务，新的执行完毕, 再执行老的事务</td></tr><tr><td>NOT_SUPPORTED</td><td>必须在一个没有的事务中执行，如果当前已有事务，则将当前事务挂起</td></tr><tr><td>NEVER</td><td>必须在一个没有的事务中执行，否则抛出异常IllegalTransactionStateException</td></tr></tbody></table><h3 id="isolation参数（事务的隔离级别）"><a href="#isolation参数（事务的隔离级别）" class="headerlink" title="@isolation参数（事务的隔离级别）"></a>@isolation参数（事务的隔离级别）</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>DEFAULT</td><td>默认的隔离级别。使用数据库默认的事务隔离级别。MYSQL默认隔离级别为REPEATABLE_READ，Oracle 默认隔离级别为READ_COMMITTED，SQLSERVER默认隔离级别为READ_COMMITTED</td></tr><tr><td>READ_UNCOMMITTED（读取未提交数据(）</td><td>最低的隔离级别。在事务完成前，其他事务可以看到该事务所修改的数据。而在其他事务提交前，该事务也可以看到其他事务所做的修改。可能导致脏读，幻读，不可重复读</td></tr><tr><td>READ_COMMITTED（读取已提交数据）</td><td>大多数数据库的默认级别。在事务完成前，其他事务无法看到该事务所修改的数据。在该事务提交后，你就可以查看其他事务插入或更新的数据。如果其他事务修改了数据，就会看到不同的数据。可防止脏读，但幻读和不可重复读仍可以发生</td></tr><tr><td>REPEATABLE_READ（可重复读）</td><td>比READ_COMMITTED更严格，该隔离级别确保如果在事务中查询了某个数据集，你至少还能再次查询到相同的数据集，即使其他事务修改了所查询的数据。然而如果其他事务插入了新数据，你就可以查询到该新插入的数据。可防止脏读，不可重复读，但幻读仍可能发生</td></tr><tr><td>SERIALIZABLE（串行化）</td><td>完全服从ACID的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。代价最大、可靠性最高的隔离级别。所有的事务都是按顺序一个接一个地执行。避免所有不安全读取</td></tr></tbody></table><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>@Transactional注解只能被应用到public方法上，对于其它的方法，标记了@Transactional注解也不会报错，但事务无法回滚。</li><li>外部调用的公共方法A<strong>未声明</strong>事务@Transactional，方法B若是<strong>其他类的方法</strong>且声明事务，则事务由子方法B控制。</li><li>外部调用的公共方法A<strong>未声明</strong>事务@Transactional，子方法B若是<strong>本类的方法</strong>，则无论子方法B是否声明事务，事务均不会生效。（可以使用applicationContext.getBean(service.class)直接从IOC容器中将类取出来，然后再调用方法B即可，这样就能用上Spring AOP生成的代理对象）</li><li>外部调用的公共方法A<strong>声明</strong>事务@Transactional，无论子方法B是不是本类的方法或者是否声明事务，事务均由公共方法A控制。</li><li>异常被try/catch捕获而没有被抛出，则事务无法回滚。</li><li>多线程下事务管理因为线程不属于spring托管，所以事物无法回滚。</li><li>数据库要支持事务，如果是mysql，要使用innodb引擎，myisam不支持事务。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot事务回滚&quot;&gt;&lt;a href=&quot;#SpringBoot事务回滚&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot事务回滚&quot;&gt;&lt;/a&gt;SpringBoot事务回滚&lt;/h1&gt;&lt;p&gt;在开发过程中有时会遇到，多次操作数据时，某次
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="SpringBoot" scheme="http://zmjwdzjl.com/tagss/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Git Commit Message规范</title>
    <link href="http://zmjwdzjl.com/2023/07/30/Git-Commit-Message%E8%A7%84%E8%8C%83/"/>
    <id>http://zmjwdzjl.com/2023/07/30/Git-Commit-Message规范/</id>
    <published>2023-07-30T15:36:24.000Z</published>
    <updated>2023-07-30T15:36:51.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-Commit-Message规范"><a href="#Git-Commit-Message规范" class="headerlink" title="Git Commit Message规范"></a>Git Commit Message规范</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BLANK</span> <span class="attr">LINE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交信息包含三个部分header(type、scope、subject)、body和footer，用空行分隔。每个部分不能超过100个字符。</p><p>header: 必填，且必须符合header格式。</p><p>body: 可填，详细描述提交的内容，可以分为多行。</p><p>footer: 可填，其他备注, 一般用于不兼容更新或关闭issue。</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>header包括三个部分：type（必填）、scope（可填）和subject（必填）。</p><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>type: commit 类型，有业内常用的字段，也可以根据需要自己定义。</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>增加新功能</td></tr><tr><td>fix</td><td>修复问题/BUG</td></tr><tr><td>docs</td><td>文档/注释</td></tr><tr><td>style</td><td>代码风格相关无影响运行结果的</td></tr><tr><td>refactor</td><td>重构</td></tr><tr><td>test</td><td>测试相关</td></tr><tr><td>chore</td><td>构建过程或辅助工具的变动</td></tr></tbody></table><h4 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h4><p>scope: commit影响的范围, 比如某某组件、某某页面。</p><h4 id="subject"><a href="#subject" class="headerlink" title="subject"></a>subject</h4><p>subject:  简短描述提交的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-Commit-Message规范&quot;&gt;&lt;a href=&quot;#Git-Commit-Message规范&quot; class=&quot;headerlink&quot; title=&quot;Git Commit Message规范&quot;&gt;&lt;/a&gt;Git Commit Message规范&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Git" scheme="http://zmjwdzjl.com/tagss/Git/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot重试机制</title>
    <link href="http://zmjwdzjl.com/2023/07/30/SpringBoot%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6/"/>
    <id>http://zmjwdzjl.com/2023/07/30/SpringBoot重试机制/</id>
    <published>2023-07-30T15:28:03.000Z</published>
    <updated>2023-07-30T15:34:26.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot重试机制"><a href="#SpringBoot重试机制" class="headerlink" title="SpringBoot重试机制"></a>SpringBoot重试机制</h1><p>spring系列的<code>spring-retry</code>是一个实用程序模块，可以帮助我们以标准方式处理任何特定操作的重试。在<code>spring-retry</code>中，所有配置都是基于简单注释的，在方法上添加<code>@Retryable</code>即可。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p>只有启用@EnabelRetry才行，写在配置类、启动类或services上都可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.EnableRetry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRetryServiceImpl</span> <span class="keyword">implements</span> <span class="title">TestRetryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Retryable</span>(value = Exception.class,maxAttempts = <span class="number">4</span>,backoff = <span class="meta">@Backoff</span>(delay = <span class="number">2000</span>,multiplier = <span class="number">1.5</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> code)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test开始"</span> + LocalTime.now());</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"test"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"test结束"</span> + LocalTime.now());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Retryable参数"><a href="#Retryable参数" class="headerlink" title="@Retryable参数"></a>@Retryable参数</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>指定重试的异常，默认为空。include的同义词，如果excludes也为空，则重试所有异常</td></tr><tr><td>include</td><td>指定重试的异常，默认为空</td></tr><tr><td>exclude</td><td>指定不重试的异常，默认为空</td></tr><tr><td>maxAttempts</td><td>最大重试次数，默认3次</td></tr><tr><td>backoff</td><td>重试等待策略，默认使用<code>@Backoff</code></td></tr></tbody></table><h3 id="Backoff参数"><a href="#Backoff参数" class="headerlink" title="@Backoff参数"></a>@Backoff参数</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>重试间隔时间，单位毫秒，默认1000</td></tr><tr><td>multiplier</td><td>重试间隔时间倍数，默认为0。若value为2，multiplier为1.5，则第一次重试为2秒，第二次为3秒，第三次为4.5秒</td></tr></tbody></table><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>当重试耗尽后，RetryOperations可以将控制传递给一个回调方法，即RecoveryCallback。spring-retry还提供了@Recover注解，用于@Retryable重试失败后回调。如果不需要回调方法，可以不写回调方法，重试耗尽后，如果还没成功符合业务判断，则抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Recover</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recover</span><span class="params">(Exception e, <span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"回调方法执行！！！！"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">400</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>回调方法与重试方法需写在同一个实现类里。</li><li>回调方法的返回值必须与重试方法一致。</li><li>方法内不能使用try catch，只能往外抛异常</li><li>由于spring-retry用到了aspect增强，所以在方法内部调用重试方法会失效。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot重试机制&quot;&gt;&lt;a href=&quot;#SpringBoot重试机制&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot重试机制&quot;&gt;&lt;/a&gt;SpringBoot重试机制&lt;/h1&gt;&lt;p&gt;spring系列的&lt;code&gt;spring-
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="SpringBoot" scheme="http://zmjwdzjl.com/tagss/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Docker修改RabbitMQ密码</title>
    <link href="http://zmjwdzjl.com/2023/07/30/Docker%E4%BF%AE%E6%94%B9RabbitMQ%E5%AF%86%E7%A0%81/"/>
    <id>http://zmjwdzjl.com/2023/07/30/Docker修改RabbitMQ密码/</id>
    <published>2023-07-30T15:25:10.000Z</published>
    <updated>2023-07-30T15:25:49.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker修改RabbitMQ密码"><a href="#Docker修改RabbitMQ密码" class="headerlink" title="Docker修改RabbitMQ密码"></a>Docker修改RabbitMQ密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入rabbitmq的容器</span><br><span class="line">docker exec -it 容器ID bash</span><br><span class="line"><span class="meta">#</span> 修改rabbitmq密码</span><br><span class="line">rabbitmqctl change_password 账户 '密码'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker修改RabbitMQ密码&quot;&gt;&lt;a href=&quot;#Docker修改RabbitMQ密码&quot; class=&quot;headerlink&quot; title=&quot;Docker修改RabbitMQ密码&quot;&gt;&lt;/a&gt;Docker修改RabbitMQ密码&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Docker" scheme="http://zmjwdzjl.com/tagss/Docker/"/>
    
      <category term="RabbitMQ" scheme="http://zmjwdzjl.com/tagss/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Mac切换JDK版本</title>
    <link href="http://zmjwdzjl.com/2023/07/30/Mac%E5%88%87%E6%8D%A2JDK%E7%89%88%E6%9C%AC/"/>
    <id>http://zmjwdzjl.com/2023/07/30/Mac切换JDK版本/</id>
    <published>2023-07-30T15:21:56.000Z</published>
    <updated>2023-07-30T15:22:44.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac切换JDK版本"><a href="#Mac切换JDK版本" class="headerlink" title="Mac切换JDK版本"></a>Mac切换JDK版本</h1><p>首先安装各个版本的jdk，安装教程略过，三个版本最终安装目录如下，版本号根据情况略有不同</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">JDK1.6:</span> <span class="string">/Library/Java/JavaVirtualMachines/1.6.0.jdk</span></span><br><span class="line"><span class="string">JDK1.8:</span> <span class="string">/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk</span></span><br><span class="line"><span class="attr">JDK20:</span> <span class="string">/Library/Java/JavaVirtualMachines/jdk-20.jdk</span></span><br></pre></td></tr></table></figure><p>安装jdk后，编辑bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_6_HOME=`/usr/libexec/java_home -v 1.6`</span><br><span class="line">export JAVA_8_HOME=`/usr/libexec/java_home -v 1.8`</span><br><span class="line">export JAVA_20_HOME=`/usr/libexec/java_home -v 20`</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认设为JDK1.8</span></span><br><span class="line">export JAVA_HOME=$JAVA_8_HOME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">alias</span>命令动态切换JDK版本</span></span><br><span class="line">alias jdk6="export JAVA_HOME=$JAVA_6_HOME"</span><br><span class="line">alias jdk8="export JAVA_HOME=$JAVA_8_HOME"</span><br><span class="line">alias jdk20="export JAVA_HOME=$JAVA_20_HOME"</span><br></pre></td></tr></table></figure><p>执行生效命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>之后只需在终端中输入alias命令就可以切换jdk版本</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac切换JDK版本&quot;&gt;&lt;a href=&quot;#Mac切换JDK版本&quot; class=&quot;headerlink&quot; title=&quot;Mac切换JDK版本&quot;&gt;&lt;/a&gt;Mac切换JDK版本&lt;/h1&gt;&lt;p&gt;首先安装各个版本的jdk，安装教程略过，三个版本最终安装目录如下，版本号根据
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac" scheme="http://zmjwdzjl.com/tagss/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac重启后环境变量失效问题</title>
    <link href="http://zmjwdzjl.com/2023/07/30/Mac%E9%87%8D%E5%90%AF%E5%90%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <id>http://zmjwdzjl.com/2023/07/30/Mac重启后环境变量失效问题/</id>
    <published>2023-07-30T15:15:10.000Z</published>
    <updated>2023-07-30T15:15:57.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac重启后环境变量失效问题"><a href="#Mac重启后环境变量失效问题" class="headerlink" title="Mac重启后环境变量失效问题"></a>Mac重启后环境变量失效问题</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑.zshrc文件</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件末尾加入生效配置文件命令，保存后重启</span></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac重启后环境变量失效问题&quot;&gt;&lt;a href=&quot;#Mac重启后环境变量失效问题&quot; class=&quot;headerlink&quot; title=&quot;Mac重启后环境变量失效问题&quot;&gt;&lt;/a&gt;Mac重启后环境变量失效问题&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Mac" scheme="http://zmjwdzjl.com/tagss/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Docker设置Redis密码</title>
    <link href="http://zmjwdzjl.com/2023/07/30/Docker%E8%AE%BE%E7%BD%AERedis%E5%AF%86%E7%A0%81/"/>
    <id>http://zmjwdzjl.com/2023/07/30/Docker设置Redis密码/</id>
    <published>2023-07-30T15:09:17.000Z</published>
    <updated>2023-07-30T15:11:23.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker设置Redis密码"><a href="#Docker设置Redis密码" class="headerlink" title="Docker设置Redis密码"></a>Docker设置Redis密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入redis的容器</span><br><span class="line">docker exec -it 容器ID bash</span><br><span class="line"><span class="meta">#</span> 进入redis目录</span><br><span class="line">cd /usr/local/bin</span><br><span class="line"><span class="meta">#</span> 运行命令</span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta">#</span> 查看现有的redis密码</span><br><span class="line">config get requirepass</span><br><span class="line"><span class="meta">#</span> 设置redis密码</span><br><span class="line">config set requirepass 密码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker设置Redis密码&quot;&gt;&lt;a href=&quot;#Docker设置Redis密码&quot; class=&quot;headerlink&quot; title=&quot;Docker设置Redis密码&quot;&gt;&lt;/a&gt;Docker设置Redis密码&lt;/h1&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Docker" scheme="http://zmjwdzjl.com/tagss/Docker/"/>
    
      <category term="Redis" scheme="http://zmjwdzjl.com/tagss/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Docker查看容器IP</title>
    <link href="http://zmjwdzjl.com/2023/01/26/Docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8IP/"/>
    <id>http://zmjwdzjl.com/2023/01/26/Docker查看容器IP/</id>
    <published>2023-01-26T11:27:40.000Z</published>
    <updated>2023-01-26T11:43:45.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker查看容器IP"><a href="#Docker查看容器IP" class="headerlink" title="Docker查看容器IP"></a>Docker查看容器IP</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure><p>IPAddress就是容器IP</p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Docker查看容器IP/1.png" alt="1"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker查看容器IP&quot;&gt;&lt;a href=&quot;#Docker查看容器IP&quot; class=&quot;headerlink&quot; title=&quot;Docker查看容器IP&quot;&gt;&lt;/a&gt;Docker查看容器IP&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Docker" scheme="http://zmjwdzjl.com/tagss/Docker/"/>
    
  </entry>
  
  <entry>
    <title>MySQL设置不区分表名大小写</title>
    <link href="http://zmjwdzjl.com/2021/12/06/MySQL%E8%AE%BE%E7%BD%AE%E4%B8%8D%E5%8C%BA%E5%88%86%E8%A1%A8%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
    <id>http://zmjwdzjl.com/2021/12/06/MySQL设置不区分表名大小写/</id>
    <published>2021-12-06T06:32:23.000Z</published>
    <updated>2021-12-06T07:38:53.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL设置不区分表明大小写"><a href="#MySQL设置不区分表明大小写" class="headerlink" title="MySQL设置不区分表明大小写"></a>MySQL设置不区分表明大小写</h2><p>MySQL创建环境时没有要求表名称不区分大小写，若期望表名不再区分大小写，需修改<strong>lower_case_table_names</strong>参数并重启服务。另外要注意，该参数修改会导致之前大写存储的表将无法识别，需要特殊处理。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>进入/etc目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/</span><br></pre></td></tr></table></figure><p>编辑my.cnf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi my.cnf</span><br></pre></td></tr></table></figure><p>在文件最后一行加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lower_case_table_names</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>重启MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>到MySQL的安装目录下，修改my.ini文件，在文件最后一行加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>重启MySQL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MySQL设置不区分表明大小写&quot;&gt;&lt;a href=&quot;#MySQL设置不区分表明大小写&quot; class=&quot;headerlink&quot; title=&quot;MySQL设置不区分表明大小写&quot;&gt;&lt;/a&gt;MySQL设置不区分表明大小写&lt;/h2&gt;&lt;p&gt;MySQL创建环境时没有要求表名称不
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="MySQL" scheme="http://zmjwdzjl.com/tagss/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo绑定域名</title>
    <link href="http://zmjwdzjl.com/2021/12/05/Hexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>http://zmjwdzjl.com/2021/12/05/Hexo绑定域名/</id>
    <published>2021-12-05T11:23:32.000Z</published>
    <updated>2023-01-26T11:31:12.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo绑定域名"><a href="#Hexo绑定域名" class="headerlink" title="Hexo绑定域名"></a>Hexo绑定域名</h1><h2 id="查询Hexo博客Github-Pages域名的IP"><a href="#查询Hexo博客Github-Pages域名的IP" class="headerlink" title="查询Hexo博客Github Pages域名的IP"></a>查询Hexo博客Github Pages域名的IP</h2><p>在终端或者命令行中输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping yourname.github.io</span><br></pre></td></tr></table></figure><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/1.png" alt="1"></p><p>就可以获取到Github Pages域名的IP</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>打开<a href="https://home.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a>，点击左侧菜单中的域名</p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/2.png" alt="2"></p><p>进入<a href="https://dc.console.aliyun.com/" target="_blank" rel="noopener">域名管理</a>页面，可以看到之前购买的域名在列表里，点击解析</p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/3.png" alt="3"></p><p>进入<a href="https://dns.console.aliyun.com/" target="_blank" rel="noopener">解析</a>页面，点击添加记录</p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/4.png" alt="4"></p><p>在域名解析设置里添加两条记录</p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/5.png" alt="5"></p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/6.png" alt="6"></p><p>主机记录就是域名的前缀，常见的用法有</p><table><thead><tr><th>主机记录</th><th>描述</th></tr></thead><tbody><tr><td>www</td><td>解析后的域名为<a href="http://www.aliyun.com" target="_blank" rel="noopener">www.aliyun.com</a></td></tr><tr><td>@</td><td>直接解析主域名 aliyun.com</td></tr><tr><td>*</td><td>泛解析，匹配其他所有域名 *.aliyun.com</td></tr><tr><td>mail</td><td>将域名解析为mail.aliyun.com，通常用于解析邮箱服务器</td></tr><tr><td>二级域名</td><td>如：abc.aliyun.com，填写abc</td></tr><tr><td>手机网站</td><td>如：m.aliyun.com，填写m</td></tr><tr><td>显性URL</td><td>不支持泛解析（泛解析：将所有子域名解析到同一地址）</td></tr></tbody></table><h2 id="新建CNAME文件"><a href="#新建CNAME文件" class="headerlink" title="新建CNAME文件"></a>新建CNAME文件</h2><p>进入本地hexo中source目录下，新建名为<code>CNAME</code>的文件，<strong>不要任何后缀</strong>，在文件中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmjwdzjl.com</span><br></pre></td></tr></table></figure><p><strong>可以填写<a href="http://www.zmjwdzjl.com/" target="_blank" rel="noopener">www.zmjwdzjl.com</a> 和 zmjwdzjl.com 两种访问方式，但如果填写 <a href="http://www.zmjwdzjl.com/" target="_blank" rel="noopener">www.zmjwdzjl.com</a> 则只支持 <a href="http://www.zmjwdzjl.com/" target="_blank" rel="noopener">www.zmjwdzjl.com</a> 一种访问方式，如果是中文域名的话，则需先将中文域名转换为Punycode标准编码的字符串，再填入CNAME文件即可</strong></p><p>然后在Hexo项目目录下执行以下命令重新部署hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h2><p>前往Github，找到Hexo项目仓库，点击Setting，往下拉找到Github Pages相关设置，在Custom domain中填入之前注册的域名，点击Save，等十分钟左右，让解析生效，就可以根据域名访问Hexo了</p><p><img src="https://blog-1306810038.cos.ap-beijing.myqcloud.com/Hexo绑定域名/7.png" alt="7"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hexo绑定域名&quot;&gt;&lt;a href=&quot;#Hexo绑定域名&quot; class=&quot;headerlink&quot; title=&quot;Hexo绑定域名&quot;&gt;&lt;/a&gt;Hexo绑定域名&lt;/h1&gt;&lt;h2 id=&quot;查询Hexo博客Github-Pages域名的IP&quot;&gt;&lt;a href=&quot;#查询He
      
    
    </summary>
    
      <category term="搭建教程" scheme="http://zmjwdzjl.com/categories/%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="http://zmjwdzjl.com/tagss/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>POI单元格格式设置</title>
    <link href="http://zmjwdzjl.com/2021/11/28/POI%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
    <id>http://zmjwdzjl.com/2021/11/28/POI单元格格式设置/</id>
    <published>2021-11-28T07:09:26.000Z</published>
    <updated>2021-11-29T07:46:57.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="POI单元格格式设置"><a href="#POI单元格格式设置" class="headerlink" title="POI单元格格式设置"></a>POI单元格格式设置</h2><h3 id="初始化操作"><a href="#初始化操作" class="headerlink" title="初始化操作"></a>初始化操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取工作簿对象</span></span><br><span class="line">Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line"><span class="comment">//获取表格对象</span></span><br><span class="line">Sheet sheet = workbook.createSheet(<span class="string">"sheet"</span>)</span><br><span class="line"><span class="comment">//获取单元格样式对象</span></span><br><span class="line">CellStyle cellStyle = worbook.createCellStyle();</span><br><span class="line"><span class="comment">//获取单元格字体对象</span></span><br><span class="line">Font font = worbook.createFont();</span><br></pre></td></tr></table></figure><h3 id="设置居中对齐"><a href="#设置居中对齐" class="headerlink" title="设置居中对齐"></a>设置居中对齐</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置水平对齐的样式为居中对齐;  </span></span><br><span class="line">cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line"><span class="comment">//设置垂直对齐的样式为居中对齐; </span></span><br><span class="line">cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);</span><br><span class="line"></span><br><span class="line"><span class="comment">//POI 3.17的写法</span></span><br><span class="line"><span class="comment">//设置水平对齐的样式为居中对齐;  </span></span><br><span class="line">cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line"><span class="comment">//设置垂直对齐的样式为居中对齐; </span></span><br><span class="line">cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br></pre></td></tr></table></figure><h3 id="设置背景色"><a href="#设置背景色" class="headerlink" title="设置背景色"></a>设置背景色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());</span><br><span class="line">cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br></pre></td></tr></table></figure><h3 id="设置边框"><a href="#设置边框" class="headerlink" title="设置边框"></a>设置边框</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置上边框</span></span><br><span class="line">cellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line"><span class="comment">//设置下边框</span></span><br><span class="line">cellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line"><span class="comment">//设置左边框</span></span><br><span class="line">cellStyle.setBorderLeft(BorderStyle.THIN);</span><br><span class="line"><span class="comment">//设置右边框</span></span><br><span class="line">cellStyle.setBorderRight(BorderStyle.THIN);</span><br></pre></td></tr></table></figure><h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">cellStyle.setFont(font);</span><br></pre></td></tr></table></figure><h3 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">font.setBold(<span class="keyword">true</span>);</span><br><span class="line">cellStyle.setFont(font);</span><br></pre></td></tr></table></figure><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CellRangeAddress构造方法四个参数为：初始行、截止行、初始列、截止列</span></span><br><span class="line">CellRangeAddress region = <span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">sheet.addMergedRegion(region);</span><br><span class="line"><span class="comment">//合并单元格后边框不会自动合并，需要额外操作</span></span><br><span class="line">setRegionBorder(BorderStyle.THIN,region,sheet);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRegionBorder</span><span class="params">(BorderStyle border,CellRangeAddress region,Sheet sheet)</span> </span>&#123;</span><br><span class="line">    RegionUtil.setBorderTop(border,region,sheet);</span><br><span class="line">    RegionUtil.setBorderBottom(border,region,sheet);</span><br><span class="line">    RegionUtil.setBorderLeft(border,region,sheet);</span><br><span class="line">    RegionUtil.setBorderRight(border,region,sheet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;POI单元格格式设置&quot;&gt;&lt;a href=&quot;#POI单元格格式设置&quot; class=&quot;headerlink&quot; title=&quot;POI单元格格式设置&quot;&gt;&lt;/a&gt;POI单元格格式设置&lt;/h2&gt;&lt;h3 id=&quot;初始化操作&quot;&gt;&lt;a href=&quot;#初始化操作&quot; class=&quot;he
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="POI" scheme="http://zmjwdzjl.com/tagss/POI/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot实现文件上传下载</title>
    <link href="http://zmjwdzjl.com/2021/11/03/SpringBoot%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    <id>http://zmjwdzjl.com/2021/11/03/SpringBoot实现文件上传下载/</id>
    <published>2021-11-03T08:13:34.000Z</published>
    <updated>2021-12-05T13:12:03.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot实现文件上传下载"><a href="#SpringBoot实现文件上传下载" class="headerlink" title="SpringBoot实现文件上传下载"></a>SpringBoot实现文件上传下载</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在application.yml中添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 表示是否开启文件上传支持，默认为 true</span></span><br><span class="line"><span class="attr">      file-size-threshold:</span> <span class="number">0</span> <span class="comment"># 表示文件写入磁盘的阀值，默认为 0</span></span><br><span class="line"><span class="attr">      location:</span> <span class="comment"># 表示上传文件的临时保存位置</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="number">1</span><span class="string">MB</span> <span class="comment"># 表示上传的单个文件的最大大小，默认为 1MB</span></span><br><span class="line"><span class="attr">      max-request-size:</span> <span class="number">10</span><span class="string">MB</span> <span class="comment"># 表示多文件上传时文件的总大小，默认为 10MB</span></span><br><span class="line"></span><br><span class="line"><span class="attr">file:</span></span><br><span class="line"><span class="attr">  upload:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">E:/test</span> <span class="comment"># 上传路径</span></span><br></pre></td></tr></table></figure><p>SpringBoot更改了不同版本的属性名称</p><p><strong>SpringBoot 1.3.x及更早</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multipart.max-file-size</span><br></pre></td></tr></table></figure><p><strong>SpringBoot 1.3.x之后</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.max-file-size</span><br></pre></td></tr></table></figure><p><strong>SpringBoot 2.0之后</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmjwdzjl.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"file"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;file.upload.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String uploadFilePath;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">httpUpload</span><span class="params">(@RequestParam(<span class="string">"files"</span>)</span> MultipartFile files[]) </span>&#123;</span><br><span class="line">        JSONObject object = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;files.length;i++) &#123;</span><br><span class="line">            <span class="comment">// getOriginalFilename方法获取文件名(带后缀)，getName方法获取文件名(不带后缀)</span></span><br><span class="line">            String fileName = files[i].getOriginalFilename();</span><br><span class="line">            File dest = <span class="keyword">new</span> File(uploadFilePath +<span class="string">'/'</span>+ fileName);</span><br><span class="line">            <span class="comment">// 判断文件所在目录是否存在，如果不存在就创建对应的目录</span></span><br><span class="line">            <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">                dest.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将文件存放到对应的目录下，如果上传重复的文件不会报错，后上传的文件会覆盖已上传的文件</span></span><br><span class="line">                files[i].transferTo(dest);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"&#123;&#125;"</span>,e);</span><br><span class="line">                object.put(<span class="string">"success"</span>,<span class="number">2</span>);</span><br><span class="line">                object.put(<span class="string">"result"</span>,<span class="string">"程序错误，请重新上传"</span>);</span><br><span class="line">                <span class="keyword">return</span> object.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        object.put(<span class="string">"success"</span>,<span class="number">1</span>);</span><br><span class="line">        object.put(<span class="string">"result"</span>,<span class="string">"文件上传成功"</span>);</span><br><span class="line">        <span class="keyword">return</span> object.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileDownLoad</span><span class="params">(HttpServletResponse response, @RequestParam(<span class="string">"fileName"</span>)</span> String fileName) </span>&#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(uploadFilePath +<span class="string">'/'</span>+ fileName);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"下载文件不存在"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    response.reset();</span><br><span class="line">    response.setContentType(<span class="string">"application/octet-stream"</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    response.setContentLength((<span class="keyword">int</span>) file.length());</span><br><span class="line">    response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + fileName );</span><br><span class="line">    <span class="keyword">try</span>(BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file))) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        OutputStream os  = response.getOutputStream();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((i = bis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buff, <span class="number">0</span>, i);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">"&#123;&#125;"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"下载失败"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"下载成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot实现文件上传下载&quot;&gt;&lt;a href=&quot;#SpringBoot实现文件上传下载&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot实现文件上传下载&quot;&gt;&lt;/a&gt;SpringBoot实现文件上传下载&lt;/h2&gt;&lt;h3 id=&quot;配
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="SpringBoot" scheme="http://zmjwdzjl.com/tagss/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis使用Map参数</title>
    <link href="http://zmjwdzjl.com/2021/11/02/MyBatis%E4%BD%BF%E7%94%A8Map%E5%8F%82%E6%95%B0/"/>
    <id>http://zmjwdzjl.com/2021/11/02/MyBatis使用Map参数/</id>
    <published>2021-11-02T07:00:28.000Z</published>
    <updated>2021-12-05T13:07:55.347Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis使用Map参数"><a href="#MyBatis使用Map参数" class="headerlink" title="MyBatis使用Map参数"></a>MyBatis使用Map参数</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>如果传入的map有注解@Param(“params”)，则key集合可以写成params.keys，value集合可以写成params.values。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getList</span><span class="params">(@Param(<span class="string">"params"</span>)</span> Map&lt;String, String&gt; params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">“com.zmjwdzjl.mapper.TestMapper”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getList"</span> <span class="attr">restultType</span>=<span class="string">"String"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">          id</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.keys"</span> <span class="attr">item</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">"and"</span>&gt;</span></span><br><span class="line">            $&#123;key&#125; = #&#123;params.$&#123;key&#125;&#125;</span><br><span class="line">                -- 或者另一种写法 $&#123;key&#125; = #&#123;params[$&#123;key&#125;]&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这两种方式map中的key只能是String类型，如果是其他类型，得到的value是null。#{params[${key}]}还可以写成${params[key]}。</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果传入的map的key要适用所有类型，可以遍历Map中的entrySet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">getList</span><span class="params">(@Param(<span class="string">"params"</span>)</span> Map&lt;Long, String&gt; params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">“com.zmjwdzjl.mapper.TestMapper”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getList"</span> <span class="attr">restultType</span>=<span class="string">"String"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">          id</span><br><span class="line">    from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"params.entrySet()"</span> <span class="attr">item</span>=<span class="string">"value"</span> <span class="attr">index</span>=<span class="string">"key"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">            id = #&#123;key&#125; and user_name= #&#123;value&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyBatis使用Map参数&quot;&gt;&lt;a href=&quot;#MyBatis使用Map参数&quot; class=&quot;headerlink&quot; title=&quot;MyBatis使用Map参数&quot;&gt;&lt;/a&gt;MyBatis使用Map参数&lt;/h2&gt;&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="MyBatis" scheme="http://zmjwdzjl.com/tagss/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Stream为集合添加序号</title>
    <link href="http://zmjwdzjl.com/2021/08/06/Stream%E4%B8%BA%E9%9B%86%E5%90%88%E6%B7%BB%E5%8A%A0%E5%BA%8F%E5%8F%B7/"/>
    <id>http://zmjwdzjl.com/2021/08/06/Stream为集合添加序号/</id>
    <published>2021-08-06T07:39:37.000Z</published>
    <updated>2023-01-26T11:31:59.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stream为集合添加序号"><a href="#Stream为集合添加序号" class="headerlink" title="Stream为集合添加序号"></a>Stream为集合添加序号</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">       u1.setUserName(<span class="string">"张三"</span>);</span><br><span class="line">      u1.setPassWord(<span class="string">"zhangsan123"</span>);</span><br><span class="line">        userList.add(u1);</span><br><span class="line"> </span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">       u2.setUserName(<span class="string">"李四"</span>);</span><br><span class="line">      u2.setPassWord(<span class="string">"lisi123"</span>);</span><br><span class="line">        userList.add(u2);</span><br><span class="line"> </span><br><span class="line">        User u3 = <span class="keyword">new</span> User();</span><br><span class="line">       u3.setUserName(<span class="string">"王五"</span>);</span><br><span class="line">      u3.setPassWord(<span class="string">"wangwu123"</span>);</span><br><span class="line">        userList.add(u3);</span><br><span class="line">        <span class="comment">//遍历添加序号</span></span><br><span class="line">      list.forEach(v -&gt; v.setIndex(list.indexOf(v)+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Integer index;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String userName;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String passWord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Stream为集合添加序号&quot;&gt;&lt;a href=&quot;#Stream为集合添加序号&quot; class=&quot;headerlink&quot; title=&quot;Stream为集合添加序号&quot;&gt;&lt;/a&gt;Stream为集合添加序号&lt;/h1&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Java" scheme="http://zmjwdzjl.com/tagss/Java/"/>
    
      <category term="Stream" scheme="http://zmjwdzjl.com/tagss/Stream/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis判断数组和集合的长度</title>
    <link href="http://zmjwdzjl.com/2021/08/06/MyBatis%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E9%95%BF%E5%BA%A6/"/>
    <id>http://zmjwdzjl.com/2021/08/06/MyBatis判断数组和集合的长度/</id>
    <published>2021-08-06T07:33:13.000Z</published>
    <updated>2021-08-06T07:33:55.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis判断数组和集合的长度"><a href="#MyBatis判断数组和集合的长度" class="headerlink" title="MyBatis判断数组和集合的长度"></a>MyBatis判断数组和集合的长度</h1><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"arr != null and arr.length &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list != null and list.size() &gt; 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"list != null and !list.isEmpty()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis判断数组和集合的长度&quot;&gt;&lt;a href=&quot;#MyBatis判断数组和集合的长度&quot; class=&quot;headerlink&quot; title=&quot;MyBatis判断数组和集合的长度&quot;&gt;&lt;/a&gt;MyBatis判断数组和集合的长度&lt;/h1&gt;&lt;h3 id=&quot;数组&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="MyBatis" scheme="http://zmjwdzjl.com/tagss/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot全局异常处理非法参数</title>
    <link href="http://zmjwdzjl.com/2021/08/06/SpringBoot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%9D%9E%E6%B3%95%E5%8F%82%E6%95%B0/"/>
    <id>http://zmjwdzjl.com/2021/08/06/SpringBoot全局异常处理非法参数/</id>
    <published>2021-08-06T07:28:25.000Z</published>
    <updated>2023-07-30T15:28:44.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot全局异常处理非法参数"><a href="#Spring-Boot全局异常处理非法参数" class="headerlink" title="Spring Boot全局异常处理非法参数"></a>Spring Boot全局异常处理非法参数</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在一个项目中我们需要对接口中传入的参数进行非法性检查，当参数非法时，抛出异常，然后返回统一的错误信息。</p><h3 id="校验注解"><a href="#校验注解" class="headerlink" title="校验注解"></a>校验注解</h3><h3 id="Bean-Validation中内置的校验注解"><a href="#Bean-Validation中内置的校验注解" class="headerlink" title="Bean Validation中内置的校验注解:"></a>Bean Validation中内置的校验注解:</h3><table><thead><tr><th>Constraint</th><th>描述</th></tr></thead><tbody><tr><td>@Null</td><td>被注解的元素必须为null</td></tr><tr><td>@NotNull</td><td>被注解的元素必须不为null</td></tr><tr><td>@AssertTrue</td><td>被注解的元素必须为true</td></tr><tr><td>@AssertFalse</td><td>被注解的元素必须为false</td></tr><tr><td>@Min(value)</td><td>被注解的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>被注解的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>被注解的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注解的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max,min)</td><td>被注解的元素大小必须在指定的范围内</td></tr><tr><td>@Digits(integer,fraction)</td><td>被注解的元素必须是一个数组，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注解的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注解的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>被注解的元素必须符合指定的正则表达式</td></tr></tbody></table><h3 id="Hibernate-Validator附加的校验注解"><a href="#Hibernate-Validator附加的校验注解" class="headerlink" title="Hibernate Validator附加的校验注解:"></a>Hibernate Validator附加的校验注解:</h3><table><thead><tr><th>Constraint</th><th>描述</th></tr></thead><tbody><tr><td>@NotBlank</td><td>被注解的元素必须非null，且长度必须大于0，并只能作用于String类型的字段上</td></tr><tr><td>@Email</td><td>被注解的元素必须是电子邮箱地址</td></tr><tr><td>@Length(min,max)</td><td>被注解的元素大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注解的元素必须非空</td></tr><tr><td>@Range(min,max)</td><td>被注解的元素必须在合适的范围内</td></tr></tbody></table><h2 id="添加测试Bean"><a href="#添加测试Bean" class="headerlink" title="添加测试Bean"></a>添加测试Bean</h2><p>添加测试Bean，测试类中定义几个字段，并且每个字段都做一定的限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmjwdzjl.demo.bean;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanValidation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^[A-Za-z0-9]+$"</span>,message=<span class="string">"只能输入由数字和26个英文字母组成的字符串"</span>)</span><br><span class="line">    <span class="keyword">private</span> String loginNumber;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank</span>(message=<span class="string">"密码不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email</span>(message=<span class="string">"邮箱地址格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加测试接口"><a href="#添加测试接口" class="headerlink" title="添加测试接口"></a>添加测试接口</h2><p>在接口中使用@Validated注解对参数进行合法性检查，如果参数合法，返回原始数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"登录接口"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">login</span><span class="params">(@Validated @RequestBody BeanValidation data)</span> </span>&#123;</span><br><span class="line">    ResultMsg resultMsg = <span class="keyword">new</span> ResultMsg(ResultStatusCode.OK.getErrcode(), ResultStatusCode.OK.getErrmsg(), data);</span><br><span class="line">    <span class="keyword">return</span> resultMsg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加异常返回类"><a href="#添加异常返回类" class="headerlink" title="添加异常返回类"></a>添加异常返回类</h2><p>如果未添加全局异常处理，将会使用默认的异常处理，但是返回的结果和自己的数据结构有很大的差异，对于前端处理返回结果也很麻烦。可以自定义参数异常返回的数据类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmjwdzjl.demo.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgumentInvalidResult</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String field;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object rejectedValue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String defaultMessage;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加全局异常处理"><a href="#添加全局异常处理" class="headerlink" title="添加全局异常处理"></a>添加全局异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zmjwdzjl.demo.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sinosoft.batchcommon.domain.RestfulResponse;</span><br><span class="line"><span class="keyword">import</span> com.sinosoft.batchcommon.util.MessageUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="comment">//如果返回的为json数据或其它对象，添加该注解</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加全局异常处理流程，根据需要设置需要处理的异常，本文以MethodArgumentNotValidException为例</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = MethodArgumentNotValidException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">MethodArgumentNotValidHandler</span><span class="params">(MethodArgumentNotValidException exception)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按需重新封装需要返回的错误信息</span></span><br><span class="line">      List&lt;ArgumentInvalidResult&gt; invalidArguments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//解析原错误信息，封装后返回，此处返回非法的字段名称，原始值，错误信息</span></span><br><span class="line">      <span class="keyword">for</span> (FieldError error : exception.getBindingResult().getFieldErrors()) &#123;</span><br><span class="line">            ArgumentInvalidResult invalidArgument = <span class="keyword">new</span> ArgumentInvalidResult();</span><br><span class="line">            invalidArgument.setDefaultMessage(error.getDefaultMessage());</span><br><span class="line">            invalidArgument.setField(error.getField());</span><br><span class="line">            invalidArgument.setRejectedValue(error.getRejectedValue());</span><br><span class="line">            invalidArguments.add(invalidArgument);</span><br><span class="line">        &#125;</span><br><span class="line">        ResultMsg resultMsg = <span class="keyword">new</span> ResultMsg(ResultStatusCode.PARAMETER_ERROR.getErrcode(), ResultStatusCode.PARAMETER_ERROR.getErrmsg(), invalidArguments);</span><br><span class="line">      <span class="comment">//也可以用stream将异常信息拼接成字符串返回</span></span><br><span class="line">        String msg = String.join(<span class="string">"\n"</span>,exception.getBindingResult().getFieldErrors().stream().map(error-&gt;error.getField+<span class="string">":"</span>+error.getRejectedValue+<span class="string">"捕获异常:"</span>+error.getDefaultMessage()).collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">return</span> resultMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot全局异常处理非法参数&quot;&gt;&lt;a href=&quot;#Spring-Boot全局异常处理非法参数&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot全局异常处理非法参数&quot;&gt;&lt;/a&gt;Spring Boot全局异常处理非法参数&lt;/
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="SpringBoot" scheme="http://zmjwdzjl.com/tagss/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring项目定制启动图案</title>
    <link href="http://zmjwdzjl.com/2021/08/06/Spring%E9%A1%B9%E7%9B%AE%E5%AE%9A%E5%88%B6%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A1%88/"/>
    <id>http://zmjwdzjl.com/2021/08/06/Spring项目定制启动图案/</id>
    <published>2021-08-06T07:12:11.000Z</published>
    <updated>2021-08-06T07:48:15.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring项目定制启动图案"><a href="#Spring项目定制启动图案" class="headerlink" title="Spring项目定制启动图案"></a>Spring项目定制启动图案</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在Spring Boot项目启动的时候会显示一个默认的Spring的图案，对应的类为SpringBootBanner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v1.5.6.RELEASE)</span><br></pre></td></tr></table></figure><p>图案的输出方式有以下几种模式，默认是CONSOLE的，即只打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Mode &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Disable printing of the banner.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OFF,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Print the banner to System.out.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CONSOLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Print the banner to the log file.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOG</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭图案"><a href="#关闭图案" class="headerlink" title="关闭图案"></a>关闭图案</h3><p>关闭图案需要在启动类的main方法中加入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">new</span> SpringApplicationBuilder(DemoApplication.class).bannerMode(Banner.Mode.OFF).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者使用配置文件修改，在application.yml文件中加入以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">main:</span></span><br><span class="line"><span class="attr">banner-mode:</span> <span class="string">console</span></span><br></pre></td></tr></table></figure><h3 id="定制图案"><a href="#定制图案" class="headerlink" title="定制图案"></a>定制图案</h3><p>在项目下的<strong>src/main/resources </strong>目录下新建一个<strong>banner.txt</strong> 即可</p><p>图案可以到<a href="https://www.bootschool.net/ascii" target="_blank" rel="noopener">banner生成网站</a>生成，然后拷贝到文件中即可</p><p>也可以通过配置文件来定制图案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># BANNER</span><br><span class="line">banner.charset=UTF-8 # Banner file encoding.</span><br><span class="line">banner.location=classpath:banner.txt # Banner file location.</span><br><span class="line">banner.image.location=classpath:banner.gif # Banner image file location (jpg/png can also be used).</span><br><span class="line">banner.image.width= # Width of the banner image in chars (default 76)</span><br><span class="line">banner.image.height= # Height of the banner image in chars (default based on image height)</span><br><span class="line">banner.image.margin= # Left hand image margin in chars (default 2)</span><br><span class="line">banner.image.invert= # If images should be inverted for dark terminal themes (default false)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring项目定制启动图案&quot;&gt;&lt;a href=&quot;#Spring项目定制启动图案&quot; class=&quot;headerlink&quot; title=&quot;Spring项目定制启动图案&quot;&gt;&lt;/a&gt;Spring项目定制启动图案&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot;
      
    
    </summary>
    
      <category term="小技巧" scheme="http://zmjwdzjl.com/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Spring" scheme="http://zmjwdzjl.com/tagss/Spring/"/>
    
  </entry>
  
</feed>
