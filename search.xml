<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringAop配合自定义注解]]></title>
    <url>%2F2020%2F09%2F19%2FSpringAop%E9%85%8D%E5%90%88%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[SpringAop配合自定义注解自定义注解作用在反射中获取注解，以取得注解修饰的类、方法或属性的相关解释 注解代码1234567891011package com.istuadmission.common.annotation;import java.lang.annotation.*;@Target(value = &#123;ElementType.TYPE, ElementType.METHOD&#125;)//使用位置（类，方法）@Retention(RetentionPolicy.RUNTIME)//加载到jvm里运行@Documented//文档化public @interface Log &#123; String value() default "";//注解的属性，如果只有一个属性，一般叫value，默认值""，可以不写 String name() default "验证名称";&#125; 使用注解12345@Log(value = "vale", name = "name") //与其它注解一样的使用@RequestMapping(value = "/add", method = RequestMethod.POST)public String add() &#123; return "test";&#125; 创建AOP切面作用定义好注解后，需要解析类来实现，此处使用Aop来实现 切面代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.istuadmission.common.aspect;import com.istuadmission.common.annotation.Log;import com.istuadmission.common.service.LogService;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Pointcut;import org.aspectj.lang.reflect.MethodSignature;import org.springframework.stereotype.Component;import javax.annotation.Resource;import java.lang.reflect.Method;@Aspect//定义切面@Componentpublic class LogAspect &#123; @Resource private LogService logService; //定义切入点 @Pointcut("@annotation(com.istuadmission.common.annotation.Log)") public void logPointCut() &#123; &#125; @Around("logPointCut()") public void around(ProceedingJoinPoint point) throws Throwable &#123; //先执行切点方法，再执行切面方法，放到最后就是先执行切面，再执行切点 Object result = point.proceed(); //获得切点的类名 String targetName = joinPoint.getTarget().getClass().getName(); //获得切点的方法名 String methodName = joinPoint.getSignature().getName(); //获取切点方法的所有入参,虽然是数组，但是参数只放在了第一位 Object[] args = point.getArgs(); System.out.println(args[0]); //获取Method对象 MethodSignature signature = (MethodSignature) point.getSignature(); Method method = signature.getMethod(); Log log = method.getAnnotation(Log.class); if (log != null) &#123; logService.insert(log.value(),log.name()); &#125; &#125;&#125;]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Aop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot后台国际化]]></title>
    <url>%2F2020%2F09%2F13%2FSpringBoot%E5%90%8E%E5%8F%B0%E5%9B%BD%E9%99%85%E5%8C%96%2F</url>
    <content type="text"><![CDATA[SpringBoot后台国际化新建国际化资源文件在resources下面新建了三个文件 messages.properties是必须的，内容可以为空，但是必须有这个文件 messages_zh_CN.properties和messages_en_US.properties分别是中文和英文资源 配置国际化如果是从请求头中获取Local Message 123456789101112131415161718192021222324import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.LocaleResolver;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver;import javax.servlet.http.HttpServletRequest;import java.util.Locale;@Configurationpublic class LocaleConfig extends AcceptHeaderLocaleResolver implements WebMvcConfigurer &#123; @Override public Locale resolveLocale(HttpServletRequest request) &#123; String headerLang = request.getHeader("language"); return headerLang == null || headerLang.isEmpty() ? Locale.CHINESE : new Locale(headerLang); &#125; @Bean public LocaleResolver localeResolver()&#123; return new LocaleConfig(); &#125;&#125; 如果是从HTTP请求中参数Local Message 12345678910111213141516171819202122232425262728293031323334353637import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.LocaleResolver;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;import org.springframework.web.servlet.i18n.SessionLocaleResolver;import java.util.Locale;@Configurationpublic class LocaleConfig &#123; /** * 默认解析器 其中locale表示默认语言 */ @Bean public LocaleResolver localeResolver() &#123; SessionLocaleResolver localeResolver = new SessionLocaleResolver(); localeResolver.setDefaultLocale(Locale.CHINESE); return localeResolver; &#125; /** * 默认拦截器 其中lang表示切换语言的参数名 */ @Bean public WebMvcConfigurer localeInterceptor() &#123; return new WebMvcConfigurer() &#123; @Override public void addInterceptors(InterceptorRegistry registry) &#123; LocaleChangeInterceptor localeInterceptor = new LocaleChangeInterceptor(); localeInterceptor.setParamName("lang"); registry.addInterceptor(localeInterceptor); &#125; &#125;; &#125;&#125; 编写工具类获取Local Message12345678910111213141516171819import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.MessageSource;import org.springframework.context.i18n.LocaleContextHolder;import org.springframework.stereotype.Component;@Componentpublic class MessageUtils &#123; @Autowired private MessageSource messageSource; public String getLocale(String msgCode) &#123; try &#123; return messageSource.getMessage(msgCode, null, LocaleContextHolder.getLocale()); &#125; catch (Exception e) &#123; return msgCode; &#125; &#125;&#125; 使用在REST API中使用 123456789101112@RestController@RequestMapping("/TestController")public class TestController &#123; @Resource private MessageUtils messageUtils; @PostMapping("/test") public String test() &#123; return messageUtils.getLocale("test"); &#125;&#125; 测试 如果出现中文乱码的情况 在Settings中将编码格式改成UTF-8 然后将乱码的文字重新编写一下就好了]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>国际化</tag>
        <tag>i18n</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后台运行与停止jar包]]></title>
    <url>%2F2020%2F09%2F05%2F%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%B8%8E%E5%81%9C%E6%AD%A2jar%E5%8C%85%2F</url>
    <content type="text"><![CDATA[后台运行与停止jar包后台运行1nohup java -jar jar包名 &amp; nohup：加在一个命令的最前面，表示不挂断的运行命令 &amp;：加载一个命令的最后面，表示这个命令放在后台执行 后台停止 找到进程号 1ps aux|grep jar包名 杀死进程 1kill -9 进程号(红框标记的进程号)]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git修改查看用户名和邮箱]]></title>
    <url>%2F2020%2F08%2F30%2FGit%E4%BF%AE%E6%94%B9%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%2F</url>
    <content type="text"><![CDATA[Git修改查看用户名和邮箱修改用户名和邮箱12$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;email&quot; 查看用户名和邮箱12$ git config user.name$ git config user.email]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MD5加密]]></title>
    <url>%2F2019%2F11%2F07%2FMD5%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[MD5加密MD5加密后转为小写16进制12345678910111213141516171819202122232425public static String Md5(String plainText) &#123; StringBuffer buf = new StringBuffer(""); String result; try &#123; MessageDigest md = MessageDigest.getInstance("MD5"); md.update(plainText.getBytes()); byte b[] = md.digest(); int i; for (int offset = 0; offset &lt; b.length; offset++) &#123; i = b[offset]; if (i &lt; 0) i += 256; if (i &lt; 16) buf.append("0"); buf.append(Integer.toHexString(i)); &#125; byte[] bytes = new String(buf).getBytes(); result = DatatypeConverter.printHexBinary(bytes); &#125; catch (NoSuchAlgorithmException e) &#123; throw new RuntimeException(e); &#125; return result; &#125; MD5加密后转为小写32进制12345678910111213141516171819202122public static String encryption(String plainText) &#123; String re_md5 = new String(); try &#123; MessageDigest md = MessageDigest.getInstance("MD5"); md.update(plainText.getBytes()); byte b[] = md.digest(); int i; StringBuffer buf = new StringBuffer(""); for (int offset = 0; offset &lt; b.length; offset++) &#123; i = b[offset]; if (i &lt; 0) i += 256; if (i &lt; 16) buf.append("0"); buf.append(Integer.toHexString(i)); &#125; re_md5 = buf.toString(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return re_md5; &#125;]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>MD5</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next使用Valine作评论系统]]></title>
    <url>%2F2019%2F08%2F29%2FHexo-Next%E4%BD%BF%E7%94%A8Valine%E4%BD%9C%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[Hexo Next使用Valine作评论系统注册LeanCloud前往LeanCloud进行注册登陆 创建应用点击创建应用 输入应用名称(名称随意), 选择开发版, 点击创建 配置应用创建成功后点击应用右上角的设置 点击存储，创建Class，Class名称设置为Comment(必须为Comment)，选择无限制，点击创建 创建后点击设置，点击应用Key，获取App ID和App Key 修改主题配置文件将主题配置文件/themes/next/_config.yml中的Valine:的enable设为true，并将App ID和App Key填入 配置域名点击安全中心, 填写自己博客对应的域名（注意协议、域名和端口号需严格一致） 启动Hexo完成后执行hexo clean和hexo s启动Hexo,打开文章便可以看到评论了 好了，到此Hexo Next使用Valine作评论系统就完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo设置侧边栏社交小图标]]></title>
    <url>%2F2019%2F08%2F29%2FHexo%E8%AE%BE%E7%BD%AE%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%A4%BE%E4%BA%A4%E5%B0%8F%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[Hexo设置侧边栏社交小图标修改主题配置文件在主题配置文件里找到social_icons，将enable修改为true,并将链接写入 启动Hexo启动Hexo后，便可以看到侧边栏已显示社交小图标 好了，到此Hexo设置侧边栏社交小图标就安装成功了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo设置首页不显示文章全文]]></title>
    <url>%2F2019%2F08%2F28%2FHexo%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E4%B8%8D%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E5%85%A8%E6%96%87%2F</url>
    <content type="text"><![CDATA[Hexo设置首页不显示文章全文修改主题配置文件在主题配置文件_config.yml文件中，找到如下： 将enable改成true就可以了在首页启动显示文章预览了 length是显示预览的长度。 启动Hexo 好了，到此Hexo设置首页不显示原文就安装成功了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next添加本地搜索功能]]></title>
    <url>%2F2019%2F08%2F28%2FHexo-Next%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Hexo Next添加本地搜索功能安装本地搜索插件在站点目录下执行npm install hexo-generator-search --save安装本地搜索插件 修改站点配置文件在站点配置文件 _config.yml中添加如下内容 12345search: path: search.xml field: post format: html limit: 10000 path：索引文件的路径，相对于站点根目录 field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面 limit：限制搜索的条目数 修改主题配置文件在主题配置文件_config.yml中找到如下内容： 1234local_search: enable: false trigger: auto top_n_per_article: 1 将enable设成true top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。 更改后如下 启动Hexo启动后便可以在侧边栏看到本地搜索功能了 好了，到此Hexo添加本地搜索功能就成功了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加打赏功能]]></title>
    <url>%2F2019%2F08%2F28%2FHexo%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Hexo添加打赏功能修改主题配置文件在主题配置文件中，找到reward_comment，将其修改为 123reward_comment: 如果对您有帮助，可以打赏哟！wechatpay: 图片链接或图片相对路径alipay: 图片链接或图片相对路径 如下图所示 启动Hexo启动hexo后，打开文章就可以看到了 好了，到此Hexo添加打赏功能就成功了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo添加RSS]]></title>
    <url>%2F2019%2F08%2F28%2FHexo%E6%B7%BB%E5%8A%A0RSS%2F</url>
    <content type="text"><![CDATA[Hexo添加RSS安装RSS插件在站点目录下执行npm install hexo-generator-feed --save安装RSS插件 修改站点配置文件在站点目录下的配置文件_config.yml中，加入以下配置 1234feed: type: atom path: atom.xml limit: 20 修改主题配置文件主题目录下的配置文件_config.yml文件中，将RSS设置为/atom.xml 1rss: /atom.xml 启动Hexo启动后就能看到RSS已经显示 好了，到此Hexo添加RSS功能就完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next统计文章访问量]]></title>
    <url>%2F2019%2F08%2F27%2FHexo-Next%E7%BB%9F%E8%AE%A1%E6%96%87%E7%AB%A0%E8%AE%BF%E9%97%AE%E9%87%8F%2F</url>
    <content type="text"><![CDATA[Hexo Next统计文章访问量注册LeanCloud前往LeanCloud进行注册登陆 创建应用点击创建应用 输入应用名称(名称随意), 选择开发版, 点击创建 配置应用创建成功后点击应用右上角的设置 点击存储，创建Class，Class名称设置为Counter(必须为Counter)，选择无限制，点击创建 创建后点击设置，点击应用Key，获取App ID和App Key 修改主题配置文件将主题配置文件/themes/next/_config.yml中的leancloud_visitors:的enable设为true，并将App ID和App Key填入 配置域名点击安全中心, 填写自己博客对应的域名（注意协议、域名和端口号需严格一致） 启动Hexo完成后执行hexo clean和hexo s启动Hexo,便可以看到访问量标志了 好了，到此Hexo Next添加统计文章访问量功能就完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo生成tag和categories]]></title>
    <url>%2F2019%2F08%2F27%2FHexo%E7%94%9F%E6%88%90tag%E5%92%8Ccategories%2F</url>
    <content type="text"><![CDATA[Hexo生成tag和categories添加标签页面打开cmd，进入站点目录下 执行hexo new page tags生成标签页 在source/tags/index.md文件中添加type: “tags”，注意：记得type:后面有空格 添加分类页面执行hexo new page categories生成分类页 在source/categories/index.md文件中添加type: “categories”，注意：记得type:后面有空格 设置菜单栏在themes\next主题目录下的_config.yml文件中找到menu，将tag和categories加入 引入tags和categories在文章中引入tags和categories 启动hexo后就可以看到tags和categories已经显示了 好了，到此Hexo生成tag和categories就完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECS上搭建Docker]]></title>
    <url>%2F2019%2F08%2F26%2FECS%E4%B8%8A%E6%90%AD%E5%BB%BADocker%2F</url>
    <content type="text"><![CDATA[ECS上搭建Docker检查版本执行uname -r检查系统的发行版号 若版本低于3.10.0，执行yum update升级系统 中途出现是否下载，输入y 若出现Complete!则升级安装成功 安装Docker执行yum install docker安装Docker 中途出现是否下载，输入y 若出现Complete!则Docker安装结束 执行docker -v查看是否安装成功 执行systemctl start docker启动Docker 执行systemctl status docker查看Docker状态，若显示running则启动成功 执行systemctl enable docker设置Docker开机自启 安装JDK执行docker search openjdk查找JDK镜像 执行docker pull openjdk拉取JDK镜像 执行docker images查看镜像列表，若出现openjdk则拉取成功 执行docker run -d -it --name myopenjdk openjdk创建JDK容器 执行docker ps -a查看容器列表，若出现openjdk容器则创建成功 安装Tomcat执行docker search tomcat查找Tomcat镜像 执行docker pull tomcat拉取Tomcat镜像 执行docker images查看镜像列表，若出现Tomcat则拉取成功 执行docker run -d -p 8080:8080 --name mytomcat tomcat创建Tomcat容器 执行docker ps -a查看容器列表，若出现Tomcat容器则创建成功 查看8080端口，若出现下图则Tomcat安装成功 安装MySQL执行docker search mysql查找MySQL镜像 执行docker pull mysql拉取MySQL镜像 执行docker images查看镜像列表，若出现MySQL则拉取成功 执行docker run -p 3306:3306 --name MySQL -e MYSQL_ROOT_PASSWORD=root -d mysql创建MySQL容器，注意：MYSQL_ROOT_PASSWORD=root是设置MySQL密码，可以将root替换成自己的密码 执行docker ps -a查看容器列表，若出现MySQL容器则创建成功 执行docker exec -it [CONTAINER ID] bash进入MySQL容器，注意：[CONTAINER ID]替换为自己MySQL容器的CONTAINER ID 执行mysql -u root -p登录MySQL 输入MySQL密码，若密码正确则登录成功 执行use mysql选择mysql数据库 执行ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;设置为mysql_native_password，注意：BY后面为MySQL密码，若不想更改密码则将root改为原有密码 执行exit;退出MySQL 执行exit退出MySQL容器 使用Navicat测试MySQL是否可使用 点击连接测试，若弹出连接成功则MySQL安装成功 安装Redis执行docker search redis查找Redis镜像 执行docker pull redis拉取Redis镜像 执行docker images查看镜像列表，若出现Redis则拉取成功 执行docker run -d -p 6379:6379 --name myredis redis创建Redis容器 执行docker ps -a查看容器列表，若出现Redis容器则创建成功 使用RedisDesktopManager测试Redis是否可使用 点击测试连接，若弹出连接Redis服务器成功则Redis安装成功 安装 RabbitMQ执行docker search rabbitmq查找RabbitMQ镜像 执行docker pull rabbitmq:3-management拉取RabbitMQ镜像 执行docker images查看镜像列表，若出现RabbitMQ则拉取成功 执行docker run -d -p 5672:5672 -p 15672:15672 --name myrabbit [IMAGE ID]创建RabbitMQ容器，注意：[IMAGE ID]用自己的IMAGE ID替换 执行docker ps -a查看容器列表，若出现RabbitMQ容器则创建成功 查看8080端口，若出现下图则RabbitMQ安装成功 好了，到此我们的Docker搭建教程就完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo配置Next主题]]></title>
    <url>%2F2019%2F08%2F22%2FHexo%E9%85%8D%E7%BD%AENext%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Hexo配置Next主题安装NexT在其文件夹中鼠标右键,点击Git Base Here 输入命令git clone https://github.com/iissnan/hexo-theme-next themes/next 启用主题在站点目录中（blog），打开配置文件_config.yml，将theme修改为next 启动服务 如果看到如下界面，说明成功安装了NexT主题 主题设定在themes\next主题目录下的_config.yml文件中将scheme设定为Pisces 语言设定在站点根目录下修改配置文件_cofig.yml中的language为zh-Hans（简体中文），可根据个人喜好修改语言 设置侧栏位置修改主题目录下配置文件_cofig.yml中sidebar的position值,可根据个人喜好修改侧栏位置 设置头像在站点根目录下载配置文件中新增avatar，值设置为头像的链接地址。地址可以是网络地址，也可以是本地地址（放置在站点根目录下的source/images/ 目录下） 设置文章代码主题在主题目录下修改配置文件中的highlight_theme，默认值为nomal。可以设置为night，根据个人喜好修改文章代码主题 修改作者头像并旋转打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl，在里面添加如下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 好了，到此为止，我们的Hexo配置Next主题就已经完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo+Github搭建博客]]></title>
    <url>%2F2019%2F08%2F21%2F%E4%BD%BF%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用Hexo+Github搭建博客安装Node.js和配置Node.js环境，打开cmd命令行，输入node -v和npm -v若安装成功则显示如下信息 安装Git和配置Git环境，若右键出现以下选择则表示安装成功 一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图 注册Github账户并新建项目项目必须要遵守格式：账户名.github.io，并且勾选Initialize this repository with a README 在建好的项目右侧有个settings按钮，点击进入 向下找到GitHub Pages，你会看到有个网址，访问它，你会发现该项目已经被部署到网络上，能够通过外网来访问它。 新建一个文件夹，然后通过命令行进入到该文件夹 输入npm install hexo -g安装Hexo 输入hexo -v检查hexo是否安装成功，若成功则出现以下信息 输入hexo init初始化项目，若出现“Start blogging with Hexo！”则表示初始化成功 输入npm install安装依赖 输入hexo g生成静态文件 输入hexo s启动Hexo 如果页面一直无法跳转，那么可能是端口被占用了。ctrl+c停止服务器，输入hexo server -p 端口号改变端口号 如果出现下图则表示成功了 将Hexo与Github page联系起来如果是第一次使用Git的话，需要设置Git的user name和email在blog文件目录下点击Git Base Here，输入git config --global user.name &quot;gao&quot;和git config --global user.email &quot;851861663@qq.com&quot;设置用户名和邮箱，这里用户名和邮箱可以替换成自己 输入cd ~/.ssh，检查是否有.ssh的文件夹 输入ls，列出该文件下的内容，若出现下图怎说明文件存在 输入ssh-keygen -t rsa -C “851861663@qq.com”连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh） 输入eval &quot;$(ssh-agent -s)&quot;添加密钥到ssh-agent 再输入ssh-add ~/.ssh/id_rsa添加生成的SSH key到ssh-agent 登录Github，点击头像下的settings 点击SSH and GPG keys 点击new ssh key，将id_rsa.pub文件里的内容复制上去 输入ssh -T git@github.com测试添加ssh是否成功,如果看到Hi后面是你的用户名，就说明成功了 假如ssh-key配置失败，需要执行一下步骤清除所有的key-pairssh-add -Drm -r ~/.ssh 重新生成ssh密钥对ssh-keygen -t rsa -C “xxx@xxx.com“ 接下来继续之前的操作 配置Deployment，在blog文件夹中，找到_config.yml文件，在末尾修改repo值 注意：每个变量的：后面都要有空格 repo值是你在github项目里的ssh（右下角） 新建一篇博客，在cmd执行命令：hexo new post “博客名” 这时候在文件夹_posts目录下将会看到已经创建的文件 在生成以及部署文章之前，还需要执行npm install hexo-deployer-git --save 编辑好文章后，就可以执行hexo d -g生成以及部署了 部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章 好了，到此为止，hexo+github博客的搭建就已经完成了]]></content>
      <categories>
        <category>搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL安装教程]]></title>
    <url>%2F2019%2F08%2F10%2FMySQL%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[MySQL 8.0.16安装教程(windows 64位)官网下载下载 MySQL下载地址点击下载Windows 64位正式版 点击No Thanks,just start my download 便可以下载 下载完成后解压，解压后的目录 解压后的目录中没有my.ini文件，在安装根目录下自行创建my.ini（新建文本文件，将文件类型改为的.ini），写入基本配置：12345678910111213141516171819202122232425[mysqld]# 设置3306端口port=3306# 设置mysql的安装目录basedir=:\Program Files\MySQL# 设置mysql数据库的数据的存放目录datadir=C:\Program Files\MySQL\Data# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10# 服务端使用的字符集默认为utf8mb4character-set-server=utf8mb4# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 默认使用“mysql_native_password”插件认证#mysql_native_passworddefault_authentication_plugin=mysql_native_password[mysql]# 设置mysql客户端默认字符集default-character-set=utf8mb4[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8mb4 配置文件中的路径要和实际存放的路径一致 在安装时，为避免出错使用管理员身份运行CMD，否则在安装时会报错，会导致安装失败的情况（进入C:\Windows\System32，右键cmd.exe以管理员身份运行） 打开CMD后进入mysql的bin目录 在MySQL目录下的bin目录下执行命令：mysqld --initialize --console [注意] 红框为root@localhost生成临时密码：9P0gYk-？0，kT，在没有更改密码前，需要记住这个密码，后续登录需要用到。复制密码先保存起来!!! 执行mysqld --install 命令，安装mysql服务 如果出现红框表示MySQL服务安装成功了， 如果出现下图则说明mysql的服务已存在，需要把它删掉 执行sc delete mysql命令，删除MySQL，再执行mysqld --install安装服务命令 服务安装成功之后，执行net start mysql命令启动MySQL服务 执行mysql -u root -p命令登录mysql，密码为之前的临时密码 执行ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;命令修改mysql密码，new pasword为修改后的密码 若显示Query OK,0 rows affected即为修改成功 好了，到此为止，MySQL就已经安装完毕了]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDK安装与环境变量配置]]></title>
    <url>%2F2019%2F07%2F14%2FJDK%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[JDK12安装与环境变量配置jdk是学习java必不可少的，以Win10 64位系统和大家分享一下jdk12的下载和安装。有需要的朋友可以参考下。 JDK官网下载地址 点击 Accept License Agreement，根据自己的电脑(32位还是64位)选择对应的版本下载。 下载完成后，运行”.exe”文件，开始安装]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>JDK</tag>
      </tags>
  </entry>
</search>
